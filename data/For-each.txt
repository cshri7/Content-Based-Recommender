Arrays haven't been covered yet, but you'll want to know how to use the enhanced for loop, called the for-each loop. The for-each loop automatically iterates through a list or array and assigns the value of each index to a variable. To understand the structure of a for-each loop, look at the following example: Code section 3.33: A for-each loop.1 String[] sentence = {"I", "am", "a", "Java", "program."};2 for (String word : sentence) {3     System.out.print(word + " ");4 }Output for code section 3.33I am a Java program. The example iterates through an array of words and prints them out like a sentence. What the loop does is iterate through sentence and assign the value of each index to word, then execute the code block. Here is the general contract of the for-each loop: for (variable declaration: array or list) {statement1statement2...statementn} Make sure that the type of the array or list is assignable to the declared variable, or you will get a compilation error. Notice that the loop automatically exits after the last item in the collection has been examined in the statementblock. Although the enhanced for loop can make code much clearer, it can't be used in some common situations. Only access. Elements can not be assigned to, eg, not to increment each element in a collection. Only single structure. It's not possible to traverse two structures at once, eg, to compare two arrays. Only single element. Use only for single element access, eg, not to compare successive elements. Only forward. It's possible to iterate only forward by single steps. At least Java 5. Don't use it if you need compatibility with versions before Java 5.