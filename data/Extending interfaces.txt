Execution of this example on BlueJ. An interface can extend several interfaces, similar to the way that a class can extend another class, using the extends keyword: Code listing 4.18: InterfaceA.java1 public interface InterfaceA {2   public void methodA();3 } Code listing 4.19: InterfaceB.java1 public interface InterfaceB {2   public void methodB();3 } Code listing 4.20: InterfaceAB.java1 public interface InterfaceAB extends InterfaceA, InterfaceB {2   public void otherMethod();3 } This way, a class implementing the InterfaceAB interface has to implement the methodA(), the methodB() and the otherMethod() methods: Code listing 4.21: ClassAB.java 1 public class ClassAB implements InterfaceAB { 2   public void methodA() { 3     System.out.println("A"); 4   } 5  6   public void methodB() { 7     System.out.println("B"); 8   } 9 10   public void otherMethod() {11     System.out.println("foo");12   }13 14   public static void main(String[] args) {15     ClassAB classAb = new ClassAB();16     classAb.methodA();17     classAb.methodB();18     classAb.otherMethod();19   }20 } Doing so, a ClassAB object can be casted into InterfaceA, InterfaceB and InterfaceAB. Test your knowledgeQuestion 4.2: Consider the following interfaces.Question 4.2: Walkable.java1 public interface Walkable {2     void walk();3 }Question 4.2: Jumpable.java1 public interface Jumpable {2     void jump();3 }Question 4.2: Swimable.java1 public interface Swimable {2     void swim();3 }Question 4.2: Movable.java1 public interface Movable extends Walkable, Jumpable {2 }List all the methods that an implementing class of Movable should implement.Answerwalk()jump()Answer 4.2: Person.java1 public class Person implements Movable {2     public void walk() {3         System.out.println("Do something.");4     }5 6     public void jump() {7         System.out.println("Do something.");8     }9 }Question 4.3: Consider the following classes and the following code.Question 4.3: ConsoleLogger.java1 import java.util.Date;2 3 public class ConsoleLogger {4     public void printLog(String log) {5         System.out.println(new Date() + ": " + log);6     }7 }Question 4.3: FileLogger.java 1 import java.io.File; 2 import java.io.FileOutputStream; 3  4 public class FileLogger { 5   public void printLog(String log) { 6     try { 7       File file = new File("log.txt"); 8       FileOutputStream stream = new FileOutputStream(file); 9       byte[] logInBytes = (new Date() + ": " + log).getBytes();10 11       stream.write(logInBytes);12 13       stream.flush();14       stream.close();15     } catch (Exception e) {16       e.printStackTrace();17     }18   }19 }Question 4.3: Common code.1 Object[] loggerArray = new Object[2];2 loggerArray[0] = new ConsoleLogger();3 loggerArray[1] = new FileLogger();4 5 for (Object logger : loggerArray) {6     // logger.printLog("Check point.");7 }Change the implementation of the code in order to be able to uncomment the commented line without compile error.AnswerYou have to create an interface that defines the method printLog(String) and makes ConsoleLogger and FileLogger implement it:Answer 4.3: Logger.java1 public interface Logger {2     void printLog(String log);3 }Answer 4.3: ConsoleLogger.java1 import java.util.Date;2 3 public class ConsoleLogger implements Logger {4     public void printLog(String log) {5         System.out.println(new Date() + ": " + log);6     }7 }Answer 4.3: FileLogger.java 1 import java.io.File; 2 import java.io.FileOutputStream; 3  4 public class FileLogger implements Logger { 5   public void printLog(String log) { 6     try { 7       File file = new File("log.txt"); 8       FileOutputStream stream = new FileOutputStream(file); 9       byte[] logInBytes = (new Date() + ": " + log).getBytes();10 11       stream.write(logInBytes);12 13       stream.flush();14       stream.close();15     } catch (Exception e) {16       e.printStackTrace();17     }18   }19 }Now your code has to cast the objects to the Logger type and then you can uncomment the code.Answer 4.3: Common code.1 Logger[] loggerArray = new Logger[2];2 loggerArray[0] = new ConsoleLogger();3 loggerArray[1] = new FileLogger();4 5 for (Logger logger : loggerArray) {6     logger.printLog("Check point.");7 }