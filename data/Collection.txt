The most basic collection interface is called Collection. This interface gives the user the generic usage of a collection. All collections need to have the same basic operations. Those are: Adding element(s) to the collection Removing element(s) from the collection Obtaining the number of elements in the collection Listing the contents of the collection, (Iterating through the collection) Code listing 5.1: CollectionProgram.java 1 import java.util.Collection;   // Interface 2 import java.util.ArrayList;    // Implementation 3  4 public class CollectionProgram { 5  6   public static void main(String[] args) { 7     Collection myCollection = new ArrayList(); 8     myCollection.add("1"); 9     myCollection.add("2");10     myCollection.add("3");11     System.out.println("The collection contains " + myCollection.size() + " item(s).");12 13     myCollection.clear();14     if (myCollection.isEmpty()) {15       System.out.println("The collection is empty.");16     } else {17       System.out.println("The collection is not empty.");18     }19   }20 }Console for Code listing 5.1The collection contains 3 item(s).The collection is empty. When you put an object in a collection, this object is not actually in the collection. Only its object reference is added to the collection. This means that if an object is changed after it was put in an collection, the object in the collection also changes. The code listing 5.2 computes the seven next days from tomorrow and stores each date in a list to read it afterwards. See what happens: Code listing 5.2: SevenNextDays.java 1 import java.util.ArrayList; 2 import java.util.Calendar; 3 import java.util.Collection; 4 import java.util.Date; 5 import java.util.GregorianCalendar; 6  7 public class SevenNextDays { 8  9   public static void main(String[] args) {10    11     // The calendar is set at the current date: today12     Calendar calendar = new GregorianCalendar();13 14     Collection collectionOfDays = new ArrayList();15     Date currentDate = new Date();16     for (int i = 0; i < 7; ++i) {17       // The calendar is now set to the next day18       calendar.add(Calendar.DATE, 1);19       currentDate.setTime(calendar.getTimeInMillis());20 21       collectionOfDays.add(currentDate);22     }23 24     for (Object oneDay : collectionOfDays) {25       System.out.println("The next day is: " + oneDay);26     }27   }28 }Console for Code listing 5.2The next day is: Wed Oct 17 22:55:44 UTC 2018The next day is: Wed Oct 17 22:55:44 UTC 2018The next day is: Wed Oct 17 22:55:44 UTC 2018The next day is: Wed Oct 17 22:55:44 UTC 2018The next day is: Wed Oct 17 22:55:44 UTC 2018The next day is: Wed Oct 17 22:55:44 UTC 2018The next day is: Wed Oct 17 22:55:44 UTC 2018 All collection items were meant to be updated to a different date but they all have been updated to the last one. This means that each update has updated all the collection items. The currentDate has been used to fill all the collection items. The collection didn't keep trace of the added values (one of the seven dates) but the added object references (currentDate). So the collection contains the same object seven times! To avoid this issue, we should have coded it this way: Code listing 5.3: ActualSevenNextDays.java 1 import java.util.ArrayList; 2 import java.util.Calendar; 3 import java.util.Collection; 4 import java.util.Date; 5 import java.util.GregorianCalendar; 6  7 public class ActualSevenNextDays { 8  9   public static void main(String[] args) {10    11     // The calendar is set at the current date: today12     Calendar calendar = new GregorianCalendar();13 14     Collection collectionOfDays = new ArrayList();15     for (int i = 0; i < 7; ++i) {16       Date currentDate = new Date();17       // The calendar is now set to the next day18       calendar.add(Calendar.DATE, 1);19       currentDate.setTime(calendar.getTimeInMillis());20 21       collectionOfDays.add(currentDate);22     }23 24     for (Object oneDay : collectionOfDays) {25       System.out.println("The next day is: " + oneDay);26     }27   }28 }Console for Code listing 5.3The next day is: Thu Oct 11 22:55:44 UTC 2018The next day is: Fri Oct 12 22:55:44 UTC 2018The next day is: Sat Oct 13 22:55:44 UTC 2018The next day is: Sun Oct 14 22:55:44 UTC 2018The next day is: Mon Oct 15 22:55:44 UTC 2018The next day is: Tue Oct 16 22:55:44 UTC 2018The next day is: Wed Oct 17 22:55:44 UTC 2018 Now each time we add an item to the collection, it is a different instance. All the items evolve separately. To add an object in a collection and avoid this item being changed each time the source object is changed, you have to copy or clone the object before you add it to the collection.