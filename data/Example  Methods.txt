Methods are the third and most important type of class member. This class contains three methods in which the behavior of the Distance class is defined: printDistance(), main(), and intValue() The printDistance() method prints the distance between the two points to the standard output (normally the console). Code section 2.6: printDistance() method.1 public void printDistance() {2   System.out.println("Distance between " + point03     + " and " + point14     + " is " + point0.distance(point1));5 } This instance method executes within the context of an implicit Distance object. The instance field references, point0 and point1, refer to instance fields of that implicit object. You can also use the special variable this to explicitly reference the current object. Within an instance method, Java binds the name this to the object on which the method is executing, and the type of this is that of the current class. The body of the printDistance method could also be coded as Code section 2.7: Explicit instance of the current class.1   System.out.println("Distance between " + this.point02     + " and " + this.point13     + " is " + this.point0.distance(this.point1)); to make the instance field references more explicit. This method both computes the distance and prints it in one statement. The distance is computed with point0.distance(point1); distance() is an instance method of the java.awt.Point class (of which point0 and point1 are instances). The method operates on point0 (binding this to the object that point0 refers to during the execution of the method) and accepting another Point as a parameter. Actually, it is slightly more complicated than that, but we'll explain later. The result of the distance() method is a double precision floating point number. This method uses the syntax Code section 2.8: String concatenation.1  "Distance between " + this.point02  + " and " + this.point13  + " is " + this.point0.distance(this.point1) to construct a String to pass to the System.out.println(). This expression is a series of String concatenation methods which concatenates Strings or the String representation of primitive types (such as doubles) or objects, and returns a long string. For example, the result of this expression for the points (0,3) and (4,0) is the String Output"Distance between java.awt.Point[x=0,y=3] and java.awt.Point[x=4,y=0] is 5.0" which the method then prints to System.out. In order to print, we invoke the println(). This is an instance method from java.io.PrintStream, which is the type of the static field out in the class java.lang.System. The Java VM binds System.out to the standard output stream when it starts a program. The main() method is the main entry point which Java invokes when you start a Java program from the command line. The command Outputjava Distance 0 3 4 0 instructs Java to locate the Distance class, put the four command line arguments into an array of String values, then pass those arguments to the public static main(String[]) method of the class. We will introduce arrays shortly. Any Java class that you want to invoke from the command line or desktop shortcut must have a main method with this signature or the following signature: public static main(String...). Code section 2.9: main() method.1 public static void main(String[] args) {2    Distance dist = new Distance(3          intValue(args[0]), intValue(args[1]),4          intValue(args[2]), intValue(args[3]));5    dist.printDistance();6 } The main() method invokes the final method, intValue(), four times. The intValue() takes a single string parameter and returns the integer value represented in the string. For example, intValue("3") will return the integer 3. People who do test-first programming or perform regression testingwritea main() method in every Java class, anda  main() function in every Python module,to run automated tests.When a person executes the file directly,the main() method executes and runs the automated tests for that file.When a person executes some other Java filethat in turn imports many other Java classes,only one main() method is executed --the main() method of the directly-executed file. The intValue() method delegates its job to the Integer.parseInt() method. The main method could have called Integer.parseInt() directly; the intValue() method simply makes the main() method slightly more readable. Code section 2.10: intValue() method.1 private static int intValue(String data) {2    return Integer.parseInt(data);3 } This method is private since, like the fields point0 and point1, it is part of the internal implementation of the class and is not part of the external programming interface of the Distance class.