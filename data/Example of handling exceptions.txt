Let's examine the following code: Code section 6.7: Handling exceptions. 1 public void methodA() throws SomeException { 2     // Method body 3 } 4  5 public void methodB() throws CustomException, AnotherException { 6     // Method body 7 } 8  9 public void methodC() {10     methodB();11     methodA();12 } In the code section 6.7, methodC is invalid.  Because methodA and methodB pass (or throw) exceptions, methodC must be prepared to handle them.  This can be handled in two ways: a try-catch block, which will handle the exception within the method and a throws clause which would in turn throw the exception to the caller to handle.  The above example will cause a compilation error, as Java is very strict about exception handling. So the programmer is forced to handle any possible error condition at some point. A method can do two things with an exception: ask the calling method to handle it by the throws declaration or handle the exception inside the method by the try-catch block. To work correctly, the original code can be modified in multiple ways.  For example, the following: Code section 6.8: Catching and throwing exceptions.1 public void methodC() throws CustomException, SomeException {2   try {3     methodB();4   } catch(AnotherException e) {5     // Handle caught exceptions.6   }7   methodA();8 } The AnotherException from methodB will be handled locally, while CustomException and SomeException will be thrown to the caller to handle it. Most of the developers are embarrassed when they have to choose between the two options. This type of decision should not be taken at development time. If you are a development team, it should be discussed between all the developers in order to have a common exception handling policy.