synchronized is a keyword. It marks a critical section.  A critical section is where one and only one thread is executing.  So to enter into the marked code the threads are synchronized, only one can enter, the others have to wait. For more information see Synchronizing Threads Methods or [3]. The synchronized keyword can be used in two ways: Create a synchronized block Mark a method synchronized A synchronized block is marked as: Code section 1: Synchronized block.1 synchronized(<object_reference>) {2    // Thread.currentThread() has a lock on object_reference. All other threads trying to access it will3    // be blocked until the current thread releases the lock.4 } The syntax to mark a method synchronized is: Code section 2: Synchronized method.1 public synchronized void method() {2    // Thread.currentThread() has a lock on this object, i.e. a synchronized method is the same as3    // calling { synchronized(this) {} }.4 } The synchronization is always associated to an object. If the method is static, the associated object is the class. If the method is non-static, the associated object is the instance. While it is allowed to declare an abstract method as synchronized, it is meaningless to do so since synchronization is an aspect of the implementation, not the declaration, and abstract methods do not have an implementation.