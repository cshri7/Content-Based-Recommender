public class Distance {   private java.awt.Point point0, point1;   public Distance(int x0, int y0, int x1, int y1) {     point0 = new java.awt.Point(x0, y0);     point1 = new java.awt.Point(x1, y1);   }   public void printDistance() {     System.out.println("Distance between " + point0 + " and " + point1                     + " is " + point0.distance(point1));   }   public static void main(String[] args) {     Distance dist = new Distance(              intValue(args[0]), intValue(args[1]),              intValue(args[2]), intValue(args[3]));     dist.printDistance();   }   private static int intValue(String data) {     return Integer.parseInt(data);   }} Figure 2.1: Basic Java syntax.For a further treatment of the syntax elements of Java, see also Syntax. The syntax of a Java class is the characters, symbols and their structure used to code the class. Java programs consist of a sequence of tokens. There are different kinds of tokens. For example, there are word tokens such as class and public which represent keywords (in purple above)  special words with reserved meaning in Java. Other words such as Distance, point0, x1, and printDistance are not keywords but identifiers (in grey). Identifiers have many different uses in Java but primarily they are used as names. Java also has tokens to represent numbers, such as 1 and 3; these are known as literals (in orange). String literals (in blue), such as  "Distance between ", consist of zero or more characters embedded in double quotes, and operators (in red) such as + and = are used to express basic computation such as addition or String concatenation or assignment. There are also left and right braces ({ and }) which enclose blocks. The body of a class is one such block. Some tokens are punctuation, such as periods . and commas , and semicolons ;. You use whitespace such as spaces, tabs, and newlines, to separate tokens. For example, whitespace is required between keywords and identifiers: publicstatic is a single identifier with twelve characters, not two Java keywords.