The advantage of the unbounded wildcard (i.e. <?>) compared to a raw type (i.e. without generic) is to explicitly say that the parameterized type is unknown, not any type. That way, all the operations that implies to know the type are forbidden to avoid unsafe operation. Consider the following code: Code section 4.45: Unsafe operation.1 public void addAtBottom(Collection anyCollection) {2   anyCollection.add(new Integer(1));3 } This code will compile but this code may corrupt the collection if the collection only contains strings: Code section 4.46: Corruption of list.1 List<String> col = new ArrayList<String>();2 addAtBottom(col);3 col.get(0).endsWith(".");Console for Code section 4.46Exception in thread "main" java.lang.ClassCastException: java.lang.Integer incompatible with java.lang.Stringat Example.main(Example.java:17) This situation could have been avoided if the addAtBottom(Collection) method was defined with an unbounded wildcard: addAtBottom(Collection<?>). With this signature, it is impossible to compile a code that is dependent of the parameterized type. Only independent methods of a collection (clear(), isEmpty(), iterator(), remove(Object o), size(), ...) can be called. For instance, addAtBottom(Collection<?>) could contain the following code: Code section 4.47: Safe operation.1 public void addAtBottom(Collection<?> anyCollection) {2    Iterator<?> iterator = anyCollection.iterator();3    while (iterator.hasNext()) {4       System.out.print(iterator.next());5    }6 } Since Java 1.5, the class java.lang.Class is generic. It is an interesting example of using generics for something other than a container class.For example, the type of String.class is Class<String>, and the type of Serializable.class is Class<Serializable>. This can be used to improve the type safety of your reflection code.In particular, since the newInstance() method in Class now returns T, you can get more precise types when creating objects reflectively.Now we can use the newInstance() method to return a new object with exact type, without casting. An example with generics: Code section 4.48: Automatic cast. 1 Customer cust = Utility.createAnyObject(Customer.class);  // No casting 2 ... 3 public static <T> T createAnyObject(Class<T> cls) { 4     T ret = null; 5     try { 6         ret = cls.newInstance(); 7     } catch (Exception e) { 8         // Exception Handling 9     }10     return ret;11 } The same code without generics: Code section 4.49: Former version. 1 Customer cust = (Customer) Utility.createAnyObject(Customer.class);  // Casting is needed 2 ... 3 public static Object createAnyObject(Class cls) { 4     Object ret = null; 5     try { 6         ret = cls.newInstance(); 7     } catch (Exception e) { 8         // Exception Handling 9     }10     return ret;11 }