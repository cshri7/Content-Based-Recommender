At this point, your objects do nothing more than declare a bunch of fields. Being a system, your objects should have the ability to interact with its environment and other systems as well. To add this capability for interaction, you need to add interactive behavior to your object class definitions as well. Such behavior is added to class definitions using a programming construct called method. In the case of the Animal, you require your virtual representation of an animal to be able to move through its environment. Let's say, as an analogy, you want your Animal object to be able to walk in its environment. Thus, you need to add a method named walk to our object. To do so, we need to write the following code:  class Animal {  String name;  int legs;  void walk() { }} As you write this code, one thing becomes immediately apparent. Just like the class description, a method has curly brackets as well. Generally, curly brackets are used to define an area (or scope) within your object. So the first set of curly brackets defined a scope for your class definition called the class-level scope. This new set of curly brackets alongside a method defines a scope for the further definition of your method called the method-level scope. In this instance, the name of our method is walk. Notice however that the name of our method also features a set of round brackets as well. More than just being visual identifiers for methods, these round brackets are used to provide our methods with additional input information called arguments. A method therefore enables an object to: In essence, methods are what makes an object behave more like a system. Notice the keyword void before the name of the method  this tells us that the method walk returns nothing. You can set a method to return any data type  it can be a String or an int as well. Figure 4: The Animal object can now be denoted as having an interaction behavior within the Java Environmentas illustrated here. Note the difference between the presentation of fields and methods.