If you have objects from different classes that do not have a common superclass, you can't call the same method in those classes, even if the two classes implement a method with the same signature. Code listing 4.16: OneClass.java1 public class OneClass {2     public int method1(String parameter) {3         return 1;4     }5 } Code listing 4.17: AnotherClass.java1 public class AnotherClass {2     public int method1(String parameter) {3         return 2;4     }5 } Code section 4.16: Impossible call.1 public static void main(String[] args) {2     doAction(new OneClass());3     doAction(new AnotherClass());4 }5 6 public void doAction(Object anObject) {7     anObject.method1("Hello!");8 } The solution is to write an interface that defines the method that should be implemented in the two classes as the SimpleInterface in the Code listing 4.14 and then the both classes can implement the interface as in the Code listing 4.15. Code section 4.17: Interface use.1 public static void main(String[] args) {2     doAction(new ClassWithInterface());3     doAction(new AnotherClassWithInterface());4 }5 6 public void doAction(SimpleInterface anObject) {7     anObject.method1("Hello!");8 } You can also implement this using a common super class but a class can only inherit from one super class whereas it can implement several interfaces. Java does not support full orthogonal multiple inheritance (i.e. Java does not allow you to create a subclass from two classes). Multiple inheritance in C++ has complicated rules to disambiguate fields and methods inherited from multiple superclasses and types that are inherited multiple times.  By separating interface from implementation, interfaces offer much of the benefit of multiple inheritance with less complexity and ambiguity.  The price of no multiple inheritance is some code redundancy; since interfaces only define the signature of a class but cannot contain any implementation, every class inheriting an interface must provide the implementation of the defined methods, unlike in pure multiple inheritance, where the implementation is also inherited. The major benefit of that is that all Java objects can have a common ancestor (a class called Object). When overriding methods defined in interfaces there are several rules to be followed: Checked exceptions should not be declared on implementation methods other than the ones declared by the interface method or subclasses of those declared by the interface method. The signature of the interface method and the same return type or subtype should be maintained when implementing the methods. All the methods of the interface need to be defined in the class, unless the class that implements the interface is abstract.