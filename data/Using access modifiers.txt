Alongside declaring and defining objects, their fields and methods, a programmer also has the ability to define the levels of access on those elements. This is done using keywords known as access modifiers. Let's modify our example to demonstrate this effect: class Animal {  public String name;  public int legs;  public void walk() { }} By declaring all fields and methods public, we have ensured that they can be used outside the scope of the Animal class. This means that any other object (other than Animal) has access to these member elements. However, to restrict access to certain member elements of a class, we can always use the private access modifier (as demonstrated below). class Animal {  private String name;  private int legs;  public void walk() { }} In this example, the fields name and legs can only be accessed within the scope of the Animal class. No object outside the scope of this class can access these two fields. However, since the walk() method still has public access, it can be manipulated by actors and objects outside the scope of this class. Access modifiers are not just limited to fields or methods, they can be used for class definitions as well (as is demonstrated below). public class Animal {  private String name;  private int legs;  public void walk() { }} The following list of keywords show the valid access modifiers that can be used with a Java program: