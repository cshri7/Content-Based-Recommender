Every class in Java can be composed of the following elements: fields, member variables or instance variables  Fields are variables that hold data specific to each object.  For example, an employee might have an ID number. There is one field for each object of a class. member methods or instance methods  Member methods perform operations on an object.  For example, an employee might have a method to issue his paycheck or to access his name. static fields or class fields  Static fields are common to any object of the same class.  For example, a static field within the Employee class could keep track of the last ID number issued. Each static field exists only once in the class, regardless of how many objects are created for that class. static methods or class methods  Static methods are methods that do not affect a specific object. inner classes  Sometimes it is useful to contain a class within another one if it is useless outside of the class or should not be accessed outside the class. Constructors  A special method that generates a new object. Parameterized types  Since 1.5, parameterized types can be assigned to a class during definition.  The parameterized types will be substituted with the types specified at the class's instantiation. It is done by the compiler. It is similar to the C language macro '#define' statement, where a preprocessor evaluates the macros. Code listing 4.1: Employee.java 1 public class Employee {              // This defines the Employee class. 2                                      // The public modifier indicates that 3                                      // it can be accessed by any other class 4  5     private static int nextID;       // Define a static field. Only one copy of this will exist, 6                                      // no matter how many Employees are created. 7  8     private int myID;                // Define fields that will be stored   9     private String myName;           // for each Employee. The private modifier indicates that10                                      // only code inside the Employee class can access it.11  12     public Employee(String name) {   // This is a constructor. You can pass a name to the constructor13                                      // and it will give you a newly created Employee object.14         myName = name;15         myID = nextID;               // Automatically assign an ID to the object16         nextID++;                    // Increment the ID counter17     }18  19     public String getName() {        // This is a member method that returns the20                                      // Employee object's name.21         return myName;               // Note how it can access the private field myName.22     }23  24     public int getID() {             // This is another member method.25    26         return myID;  27     }28  29     public static int getNextID() {  // This is a static method that returns the next ID30                                      // that will be assigned if another Employee is created.31         return nextID;32     }33 } The following Java code would produce this output: Code listing 4.2: EmployeeList.java 1 public class EmployeeList { 2     public static void main(String[] args) { 3  4         System.out.println(Employee.getNextID()); 5   6         Employee a = new Employee("John Doe"); 7         Employee b = new Employee("Jane Smith"); 8         Employee c = new Employee("Sally Brown"); 9  10         System.out.println(Employee.getNextID());11  12         System.out.println(a.getID() + ": " + a.getName());13         System.out.println(b.getID() + ": " + b.getName());14         System.out.println(c.getID() + ": " + c.getName());15     }16 }Console for Code listing 4.2030: John Doe1: Jane Smith2: Sally Brown