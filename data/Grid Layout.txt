This layout arranges components in the form of the table (grid). The number of rows and columns in the grid is specified in the constructor. The other two parameters, if present, specify vertical and horizontal padding between components. Code listing 9.4: GridLayoutApplet.java 1 import java.applet.Applet; 2 import java.awt.Button; 3 import java.awt.GridLayout; 4 import java.awt.Label; 5 import java.awt.TextField; 6  7 public class GridLayoutApplet extends Applet { 8  9     Button submitButton = new Button("Submit");10     TextField t1 = new TextField();                // Blank11     TextField t2 = new TextField(5);               // Blank in 5 columns12     TextField t3 = new TextField("Input here");    // Predefined text13     TextField t4 = new TextField("Input here", 5); // Predefined text in 5 columns14     Label nameLabel = new Label("Name: ");15 16     /**17      * Init.18      */19     public void init() {20         // 3 rows, 4 columns, 2 pixel spacing21         setLayout(new GridLayout(3, 4, 2, 2));22         add(nameLabel);23         add(t1);24         add(t2);25         add(t3);26         add(t4);27         add(submitButton);28     }29 } The items have been displayed in this order: We see that the layout has been configured to fill the grid left-to-right and then top-to-bottom and that the two last columns have been ignored (they don't even exist). They have been ignored because there are not enough items to fill them and the number of rows is prior to the number of columns. This means that when you specify a number of rows that is not zero, the number of columns is simply ignored. You should specify zero rows in order that the number of columns is taken into account. A grid layout creates cells with equal sizes. So it can be used not only to display items as a grid but also to display two items with the same width or height.