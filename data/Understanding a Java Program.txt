This article presents a small Java program which can be run from the console. It computes the distance between two points on a plane. You do not need to understand the structure and meaning of the program just yet; we will get to that soon. Also, because the program is intended as a simple introduction, it has some room for improvement, and later in the module we will show some of these improvements. But let's not get too far ahead of ourselves! This class is named Distance, so using your favorite editor or Java IDE, first create a file named Distance.java, then copy the source below, paste it into the file and save the file. Code listing 2.1: Distance.java 1  public class Distance { 2    private java.awt.Point point0, point1; 3   4    public Distance(int x0, int y0, int x1, int y1) { 5      point0 = new java.awt.Point(x0, y0); 6      point1 = new java.awt.Point(x1, y1); 7    } 8   9    public void printDistance() {10      System.out.println("Distance between " + point0 + " and " + point111                      + " is " + point0.distance(point1));12    }13  14    public static void main(String[] args) {15      Distance dist = new Distance(16               intValue(args[0]), intValue(args[1]),17               intValue(args[2]), intValue(args[3]));18      dist.printDistance();19    }20  21    private static int intValue(String data) {22      return Integer.parseInt(data);23    }24  } At this point, you may wish to review the source to see how much you might be able to understand. While perhaps not being the most literate of programming languages, someone with understanding of other procedural languages such as C, or other object oriented languages such as C++ or C#, will be able to understand most if not all of the sample program. Once you save the file, compile the program: Compilation command$ javac Distance.java (If the javac command fails, review the installation instructions.) To run the program, you supply it with the x and y coordinates of two points on a plane separated by a space. For this version of Distance, only integer points are supported. The command sequence is java Distance <x0> <y0> <x1> <y1> to compute the distance between the points (x0, y0) and (x1, y1). If you get a java.lang.NumberFormatException exception, some arguments are not a number. If you get a java.lang.ArrayIndexOutOfBoundsException exception, you did not provide enough numbers. Here are two examples: Output for the distance between the points (0, 3) and (4, 0)$ java Distance 0 3 4 0Distance between java.awt.Point[x=0,y=3] and java.awt.Point[x=4,y=0] is 5.0 Output for the distance between the points (-4, 5) and (11, 19)$ java Distance -4 5 11 19Distance between java.awt.Point[x=-4,y=5] and java.awt.Point[x=11,y=19] is 20.518284528683193 We'll explain this strange looking output, and also show how to improve it, later.