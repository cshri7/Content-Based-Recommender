A method may return a value (which can be a primitive type or an object reference). If the method does not return a value we use the void Java keyword. However, a method can return only one value so what if you want to return more than one value from a method?You can pass in an object reference to the method, and let the method modify the object properties so the modified values can be considered as an output value from the method.You can also create an Object array inside the method, assign the return values and return the array to the caller. However, this gives a problem if you want to mix primitive data types and object references as the output values from the method. There is a better approach, define a special return object with the needed return values. Create that object inside the method, assign the values and return the reference to this object. This special object is "bound" to this method and used only for returning values, so do not use a public class. The best way is to use a nested class, see example below: Code listing 3.12: Multiple returned variables. 1 public class MyObject { 2   ... 3   4   /** Nested object is for return values from getPersonInfoById method */ 5   private static class ReturnObject { 6       private int age; 7       private String name; 8  9       public void setAge(int age) {10           this.age = age;11       }12  13       public int getAge() {14           return age;15       }16 17       public void setName(String name) {18           name = name;19       }20  21       public String getName() {22           return name;23       }24   } // End of nested class definition25 26   /** Method using the nested class to return values */27   public ReturnObject getPersonInfoById(int id) {28     int    age;29     String name;30     ...31     // Get the name and age based on the ID from the database32     ...33     ReturnObject result = new ReturnObject();34     result.setAge(age);35     result.setName(name);36 37     return result;38   }39 } In the above example the getPersonInfoById method returns an object reference that contains both values of the name and the age. See below how you may use that object: Code section 3.78: Retrieving the values.1 MyObject object = new MyObject();2 MyObject.ReturnObject person = object.getPersonInfoById(102);3 4 System.out.println("Person Name=" + person.getName());5 System.out.println("Person Age =" + person.getAge()); Test your knowledgeQuestion 3.10: Consider the following code:Question 3.10: Compiler error.1 private int myMethod(int a, int b, String c) {2   if (a > 0) {3     c = "";4     return c;5   }6   int b = b + 2;7   return b;8 }The code above will return a compiler error. Why?AnswerAnswer 3.10: Compiler error.1 private int myMethod(int a, int b, String c) {2   if (a > 0) {3     c = "";4     return c;5   }6   int b = b + 2;7   return b;8 }The method is supposed to return a int but at line 4, it returns c, which is a String. The constructor is a special method called automatically when an object is created with the new keyword. Constructor does not have a return value and its name is the same as the class name. Each class must have a constructor. If we do not define one, the compiler will create a default so called empty constructor automatically. Code listing 3.13: Automatically created constructor.1 public class MyClass {2   /**3   * MyClass Empty Constructor4   */5   public MyClass() {6   }7 }