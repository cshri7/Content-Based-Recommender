So, with our listener interface defined, we need one or more implementations (actual listener classes). At the very least we need one that will keep a running sum of the numbers read. We can add as many as we like, of course. But let's stick with just one for now. Obviously, this class must implement our NumberReadListener interface. Keeping a running summation is a matter of adding numbers to a field as the events arrive. And we wanted to report on the sum when the end of the stream is reached; since we know when that happens (i.e. the numberStreamTerminated method is called), a simple println statement will do: Code listing 1.3: NumberReadListenerImpl.package org.wikibooks.en.javaprogramming.example;public class NumberReadListenerImpl implements NumberReadListener {       double totalSoFar = 0D;    @Override    public void numberRead(NumberReadEvent numberReadEvent) {        totalSoFar += numberReadEvent.getNumber();    }    @Override    public void numberStreamTerminated(NumberReadEvent numberReadEvent) {        System.out.println("Sum of the number stream: " + totalSoFar);    }} So, is this code any good? No. It's yucky and terrible and most of all not thread safe. But it will do for our example.