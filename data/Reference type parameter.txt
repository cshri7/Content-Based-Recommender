The object references are passed by value. It means that: There is no more link between the reference inside the method and the source reference, The source object itself and the object itself inside the method are still the same. You must understand the difference between the reference of an object and the object itself. A object reference is the link between a variable name and an instance of object: Object object  new Object() An object reference is a pointer, an address to the object instance. The object itself is the value of its attributes inside the object instance: object.firstName"James"object.lastName"Gosling"object.birthDay"May 19" Take a look at the example above: Code section 3.71: A method modifying an object.1 private void modifyObject(FirstClass anObject) {2   anObject.setName("Susan");3 } Code section 3.72: Passing reference value to method.1 FirstClass object = new FirstClass();2 object.setName("Christin");3 4 modifyObject(object);5 6 System.out.println(object.getName());Output for Code section 3.72Susan The name has changed because the method has changed the object itself and not the reference. Now take a look at the other example: Code section 3.73: A method modifying an object reference.1 private void modifyObject(FirstClass anObject) {2   anObject = new FirstClass();3   anObject.setName("Susan");4 } Code section 3.74: Passing reference value to method.1 FirstClass object = new FirstClass();2 object.setName("Christin");3 4 modifyObject(object);5 6 System.out.println(object.getName());Output for Code section 3.74Christin The name has not changed because the method has changed the reference and not the object itself. The behavior is the same as if the method was in-lined and the parameters were assigned to new variable names: Code section 3.75: In-lined method. 1 FirstClass object = new FirstClass(); 2 object.setName("Christin"); 3  4 // Start of the method 5 FirstClass anObject = object; 6 anObject = new FirstClass(); 7 anObject.setName("Susan"); 8 // End of the method 9 10 System.out.println(object.getName());Output for Code section 3.75Christin