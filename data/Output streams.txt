Output Streams direct streams of bytes outwards to the environment from our program or application. OutputStream is an abstract class which is the destination counterpart of InputStream.  OutputStream has a write() method which can be used to write a byte to the stream.  The method is overloaded, and can take an array as well.  A close() method closes the stream when the application is finished with it, and it has a flush() method.  The stream may wait until it has a certain amount before it writes it all at once for efficiency.  If the stream object is buffering any data before writing it, the flush() method will force it to write all of this data.  Like InputStream, this class cannot be instantiated, but has concrete subclasses that parallel those of InputStream, eg ByteArrayOutputStream, FileOutputStream, etc. In the following example, we store the current time in an already existing file called log.txt located in the same folder than the class. Code listing 9.2: Example of output stream. 1 import java.io.File; 2 import java.io.FileOutputStream; 3 import java.util.Date; 4   5 public class LogTime { 6     public static void main(String[] args) throws Exception { 7         // Generate data 8         String timeInString = new Date().toString(); 9 10         // Store data11         File file = new File("log.txt");12         FileOutputStream stream = new FileOutputStream(file);13 14         byte[] timeInBytes = timeInString.getBytes();15 16         stream.write(timeInBytes);17         stream.flush();18         stream.close();19     }20 } This case is more simple as we can put all the data in the stream at the same time. The first part of the code generate a string containing the current time. Then we create a File object identifying the output file and an output stream for this file. We write the data in the stream, flush it and close it. That's all. No try/catch block has been defined for readability but the thrown exceptions should be caught. In order to read a text file several times from the beginning, a FileChannel variable should be introduced, only to reposition the reader. Now let's execute it: LogTime execution$ java LogTime We should obtain this content: Code listing 9.4: log.txtMon Oct 15 14:24:40 CEUTC 2018 If it shows a FileNotFoundException or an IOException, the file should not have been created or it is not placed in the right folder. There is also Writer which is a character counterpart of OutputStream, and a destination counterpart to Reader, this is also an abstract superclass.  Particular implementations parallel those of Reader, eg FileWriter, StringWriter, and OutputStreamWriter, for converting a regular OutputStream into a reader so that it can take character data.