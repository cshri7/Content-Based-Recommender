There are three overloaded versions of the wait method to support different ways to specify the timeout value: java.lang.Object.wait(), java.lang.Object.wait(long) and java.lang.Object.wait(long, int).  The first method uses a timeout value of zero (0), which means that the wait does not timeout; the second method takes the number of milliseconds as a timeout; the third method takes the number of nanoseconds as a timeout, calculated as 1000000 * timeout + nanos. The thread calling wait is blocked (removed from the set of executable threads) and added to the object's wait list.  The thread remains in the object's wait list until one of three events occurs: The wait method must be called inside of a block or method synchronized on the object.  This insures that there are no race conditions between wait and notify.  When the thread is placed in the wait list, the thread releases the object's mutex lock.  After the thread is removed from the wait list and added to the set of executable threads, it must acquire the object's mutex lock before continuing execution.