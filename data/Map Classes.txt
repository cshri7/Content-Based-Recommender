The Map interface has the following implementations:  Figure 5.7: Map class diagram.  java.util.TreeMap<E>guarantees that the map will be in ascending key order, sorted according to the natural order for the key's class, not-synchronized.java.util.Hashtable<E>Synchronized, null can not be used as keyjava.util.HashMap<E>is roughly equivalent to Hashtable, except that it is unsynchronized and permits nullsjava.util.concurrent.ConcurrentHashMapsame as Hashtable, plus retrieval operations (including get) generally do not block, so may overlap with update operations (including put and remove).java.util.WeakHashMap<E>entry in a WeakHashMap will automatically be removed when its key is no longer in ordinary use. Non-synchronized.java.util.LinkedHashMap<E>This linked list defines the iteration ordering, which is normally the order in which keys were first inserted into the map (first insertion-order). Note that insertion order is not affected if a key is re-inserted into the map.java.util.IdentityHashMapThis class implements the Map interface with a hash table, using reference-equality in place of object-equality when comparing keys (and values). In other words, in an IdentityHashMap, two keys k1 and k2 are considered equal if and only if (k1==k2). (In normal Map implementations (like HashMap) two keys k1 and k2 are considered equal if and only if (k1==null? k2==null: k1.equals(k2)).) Not-synchronized.java.util.EnumMapAll of the keys in an enum map must come from a single enum type that is specified, explicitly or implicitly, when the map is created. Enum maps are represented internally as arrays. This representation is extremely compact and efficient. Not-synchronized.