ComServerThreadThis class extended from a Thread is responsible to service one client. The Socket connection will be open between the client and server. A simple protocol has to be defined between the client and server, the server has to understand what the client wants from the server. The client will send a terminate command, for which the server will terminate the socket connection.  The ComServerThread class is responsible to handle all client requests, until the client sends a terminate command. Code listing 1.2: ComServerThread /**  * -- A class extended from a Thread; Responsible to service one client --  */ class '''ComServerThread''' extends Thread {    private Socket clientSocket = null;    COM_DATA tDataFromClient;    COM_DATA tDataToClient;     ObjectInputStream oIn;    ObjectOutputStream oOut;    /**     * -- Constructor --     */    public ComServerThread( Socket socket )    {       super( "ComServerThread" );       this.clientSocket = socket;    } // -- End of ComServerThread() constructor --    /**     * -- Overrun from the Thread (super) class --     */    public void run()    {       try {          // --- Create the Writer; will be used to send data to client ---          oOut = new ObjectOutputStream( clientSocket.getOutputStream() );          // --- Create the Reader; will be used to get data from client ---          oIn  = new ObjectInputStream( clientSocket.getInputStream() );          // --- Create a new protocol object ---          ComProtocol comp = new ComProtocol();          // --- Send something to client to indicate that server is ready ---          tDataToClient  = '''comp.processInput( null );'''          '''sendDataToClient'''( tDataToClient, oOut );          // --- Get the data from the client ---          while ( true )          {             try {                tDataFromClient = '''getDataFromClient( oIn )''';                // --- Parse the request and get the reply ---                tDataToClient = '''comp.processInput( tDataFromClient );'''                // --- Send data to the Client ---                '''sendDataToClient'''( tDataToClient, oOut );             }             catch ( EOFException e ) {                System.out.println( "Client Disconnected, Bye, Bye" );                break;             }             // --- See if the Client wanted to terminate the connection ---             if ( tDataToClient.bExit )             {                System.out.println( "Client said Bye. Bye" );                break;             }          }          // --- Close resources;  This client is gone ---          comp.Final();          oOut.close();          oIn.close();          clientSocket.close();       } catch ( IOException e ) {        e.printStackTrace();       }    } // -- End of run() Method --    /**     * Get data from Client      */    private static COM_DATA '''getDataFromClient'''( ObjectInputStream oIn ) throws IOException                                                                             {        COM_DATA  tDataFromClient = null;                 // --- Initialize variables ---        //   tDataFromClient = new COM_DATA();        while ( tDataFromClient == null )        {           try {              // --- Read Line Number first --              tDataFromClient = (COM_DATA) oIn.readObject();           } catch ( ClassNotFoundException e ) {               System.out.println( "ClassNotFound" );           }        }        System.out.println( "Get: " + tDataFromClient.comData );     return tDataFromClient;    } // --- getDataFromClient() Method ---     /**     * Send data to Client      */    private static void '''sendDataToClient'''( COM_DATA tDataToClient,                                           ObjectOutputStream  oOut ) throws IOException    {                 System.out.println( "Sent: " + tDataToClient.comData );        oOut.writeObject( tDataToClient );      return;    } // -- End of sendDataToClient() Method -- } // --- End of ComServerThread class --- COM_DATA tDataFromClientThis variable will contain the data object from the client.COM_DATA tDataToClientThis variable will contain the data object to be sent to the client.sendDataToClientThis method sends the data object to the client.getDataFromClientThis method gets the data object from the client.processInput( tDataFromClient )This method of the class ComProtocol interprets the client commands and returns the data object that will be sent back to the client. ComProtocolThis class implements, and encapsulates the communication logic (protocol). The protocol is the following:The client initiate the connection.The server accepts it and sends an acknowledgment notifying that it's readyThe client sends a requestThe server response based on the request...The client sends a BYE requestThe server acknowledge the BYE request and disconnects the socket connectionThe client gets the acknowledgment to the BYE...The client sends a SHUTDOWN requestThe server acknowledge the SHUTDOWN request and disconnects and also stops listening of other clients.The client gets the acknowledgment to the SHUTDOWN Code listing 1.3: ComProtocol class '''ComProtocol''' {  private static final int COM_STATUS_WAITING    = 0;   private static final int COM_STATUS_READY_SENT = 1;  private static final int COM_STATUS_DATA_SENT  = 2;  private static final int COM_STATUS_WAITING_FOR_TERMINALID = 3;  private int state = COM_STATUS_WAITING;    // --- Reference to 'BACK-END' module ---    private MqTeAccess mqTe;  ...    /**     * Create a protokol object; CAll MQ INI function     */    public ComProtocol()    {     int    iRet = 0;        // --- Initialize 'BACK-END' modules  ---        mqTe. ... ...    }    /**     * --- Process the Input and Create the output to the Client ---     */    public COM_DATA processInput( COM_DATA theInput )    {     COM_DATA theOutput;        // --- Initialize Variables ---        theOutput = new COM_DATA();        // --- Check if the Clients want to disconnect ---        if ( theInput != null )         {            if ( theInput.comData.equals('''"!BYE.@"''') )            {                // --- The Client wants to terminate; Echo data back to client                theOutput.comData = "BYE.";                // --- Mark the communication to be terminated ---                theOutput.bExit = true;                // --- Set the internal state to wait for a new client ---                state = COM_STATUS_WAITING;                // --- Return Data object to be sent to the client ---                return theOutput;            }            if ( theInput.comData.equals('''"!SHUTDOWN.@"''') )            {                // --- The Client wants to terminate; Echo data back to client                theOutput.comData = "BYE.";                // --- Mark the communication to be terminated ---                theOutput.bExit = true;                // --- Tell the server to stop listening for new clients ---                ComServer.GL_listening = false;                // --- Set the internal state to wait for a new client ---                state = COM_STATUS_WAITING;                // --- Return Data object to be sent to the client ---                return theOutput;            }        }        if ( state == COM_STATUS_WAITING )        {            // --- Send ready Message to the Client ---            theOutput.comData = "Ready:";            // --- Set the internal state ready; and wait for TerminalId ---            state = COM_STATUS_WAITING_FOR_TERMINALID;        }        else if ( state == COM_STATUS_WAITING_FOR_TERMINALID )        {         int iRet;            // --- Get the Terminal ID ---            sTermId = theInput.comData;             // --- Call 'BACK-END' modules ...  ---            mqTe. ... ...            // --- Send ready Message with the Server Version to the Client ---            theOutput.comData = "Ready;Server Version 1.0:";            // --- Set the internal state raedy; and wait for TerminalId ---            state = COM_STATUS_READY_SENT;        }        else if ( state == COM_STATUS_READY_SENT )        {         int iRet;            String sCommand = theInput.comData;            // --- Call 'BACK-END' modules ... ...            /*            ** --- Check if we should get Response data ---            */            if ( theInput.iRet == COM_DATA.NOWAIT_FOR_RESPONSE ) {                // -- Set the Output Value ---                theOutput.iRet = iRet;                theOutput.comData = "";            }            else {                // --- Call 'BACK-END' modules ---                mqTe. ...                // --- Set the Output Value ---                theOutput.comData    = mqTe.sResponseBuffer;                 theOutput.iRet       = iRet;            }        }     return theOutput;    }  // --- End of Method processInput() --- } // --- End of ComProtocol Class Definition -------