public class Distance {private java.awt.Point point0, point1;public Distance(int x0, int y0, int x1, int y1) {point0 = new java.awt.Point(x0, y0);point1 = new java.awt.Point(x1, y1);}public void printDistance() {System.out.println("Distance between " + point0 + " and " + point1+ " is " + point0.distance(point1));}public static void main(String[] args) {Distance dist = new Distance(intValue(args[0]), intValue(args[1]),intValue(args[2]), intValue(args[3]));dist.printDistance();}private static int intValue(String data) {return Integer.parseInt(data);}} Figure 2.2: Declarations and Definitions. Sequences of tokens are used to construct the next building blocks of Java classes as shown above: declarations and definitions. A class declaration provides the name and visibility of a class. In our example, public class Distance is the class declaration. It consists (in this case) of two keywords, public and class followed by the identifier Distance. This means that we are defining a class named Distance. Other classes, or in our case, the command line, can refer to the class by this name. The public keyword is an access modifier which declares that this class and its members may be accessed from other classes. The class keyword, obviously, identifies this declaration as a class. Java also allows declarations of interfaces and annotations. The class declaration is then followed by a block (surrounded by curly braces) which provides the class's definition (in blue in figure 2.2). The definition is the implementation of the class  the declaration and definitions of the class's members. This class contains exactly six members, which we will explain in turn.