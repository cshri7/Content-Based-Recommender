The String class also allows for the modification of cases. The two methods that make this possible are toLowerCase() and toUpperCase(). Code section 3.96: Case modification.1 String str = "wIkIbOoKs";2 System.out.println(str.toLowerCase());3 System.out.println(str.toUpperCase());Output for Code section 3.96wikibooksWIKIBOOKS These methods are useful to do a search which is not case sensitive: Code section 3.97: Text search. 1 String word = "Integer"; 2 String text = "A number without a decimal part is an integer." 3   + " Integers are a list of digits."; 4  5 ... 6  7 // Remove the case 8 String lowerCaseWord = word.toLowerCase(); 9 String lowerCaseText = text.toLowerCase();10 11 // Search12 int index = lowerCaseText.indexOf(lowerCaseWord);13 while (index != -1) {14   System.out.println(word15     + " appears at column "16     + (index + 1)17     + ".");18   index = lowerCaseText.indexOf(lowerCaseWord, index + 1);19 }Output for Code section 3.97Integer appears at column 38.Integer appears at column 47. Test your knowledgeQuestion 3.12: You have mail addresses in the following form: <firstName>.<lastName>@<companyName>.orgWrite the String getDisplayName(String) method that receives the mail string as parameter and returns the readable person name like this: LASTNAME FirstnameAnswerAnswer 3.12: getDisplayName() 1 public static String getDisplayName(String mail) { 2   String displayName = null; 3   4   if (mail != null) { 5     String[] mailParts = mail.split("@"); 6     String namePart = mailParts[0]; 7     String[] namesParts = namePart.split("\\."); 8     9     // The last name10     String lastName = namesParts[1];11     lastName = lastName.toUpperCase();12    13     // The first name14     String firstName = namesParts[0];15    16     String firstNameInitial = firstName.substring(0, 1);17     firstNameInitial = firstNameInitial.toUpperCase();18    19     String firstNameEnd = firstName.substring(1);20     firstNameEnd = firstNameEnd.toLowerCase();21    22     // Concatenation23     StringBuilder displayNameBuilder = new StringBuilder(lastName).append(" ").append(firstNameInitial).append(firstNameEnd);24     displayName = displayNameBuilder.toString();25   }26  27   return displayName;28 }We only process non null strings,We first split the mail into two parts to separate the personal information from the company information and we keep the name data,Then we split the name information to separate the first name from the last name. As the split() method use regular expression and . is a wildcard character, we have to escape it (\.). However, in a string, the \ is also a special character, so we need to escape it too (\\.),The last name is just capitalized,As the case of all the first name characters will not be the same, we have to cut the first name. Only the first name initial will be capitalized,Now we can concatenate all the fragments. We prefer to use a StringBuilder to do that.  Java API: java.lang.String  Java API: java.lang.StringBuffer  Java API: java.lang.StringBuilder