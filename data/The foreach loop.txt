The foreach statement allows you to iterate through all the items in a collection,examining each item in turn while still preserving its type. The syntax for the foreach statement is: for (type item: collection) statement; For an example, we'll take an array of Strings denoting days in a week and traverse through thecollection, examining one item at a time. Code section 3.18: A foreach loop.1 String[] days = {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"};2 3 for (String day : days) {4   System.out.println(day);5 }Output for code listing 3.18MondayTuesdayWednesdayThursdayFridaySaturdaySunday Notice that the loop automatically exits after the last item in the collection has been examined in the statementblock. Although the enhanced for loop can make code much clearer, it can't be used in some common situations. Only access. Elements can not be assigned to, eg, not to increment each element in a collection. Only single structure. It's not possible to traverse two structures at once, eg, to compare two arrays. Only single element. Use only for single element access, eg, not to compare successive elements. Only forward. It's possible to iterate only forward by single steps. At least Java 5. Don't use it if you need compatibility with versions before Java 5.