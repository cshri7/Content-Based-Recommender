Although each object you create from a class definition is essentially the same, there has to be a way of differentiating those objects in your code. Object fields (or simply fields) are what makes your objects unique from other objects. Let's take our present abstraction for instance. An animal could be a dog, cat, camel or a duck but since this abstraction is of a very generic kind, you need to define fields that are common to all of these animals and yet makes the animals stand apart. For instance, you can have two fields: name (a common name given to any one of these animals) and legs (the number of limbs any one of these animals would require to walk). As you start defining your objects, they start to look like this:  class Animal {  String name;  int legs;} In the code above you defined two object fields: a field called name of type String; and, a field called legs of type int. These special pre-defined types are called data types. The String data type is used for fields that can hold textual values like names, while the int (integer) data type is used for fields that can hold numeric values Figure 3: In order to denote the Animal object as a system within the Java Environment,you present it as such. Note how fields are presented. In order to demonstrate how fields work, we will go ahead and create objects from this amended version of our class definition as such: Animal animal1 = new Animal();Animal animal2 = new Animal();animal1.name = "dog";animal1.legs = 4;animal2.name = "duck";animal2.legs = 2; You can access the fields of your created objects by using the . (dot) or membership operator. In the example above, we created two objects: animal1 and animal2 of type Animal. And since, we had established that each Animal has two fields namely name and legs, we accessed and modified these fields for each of our objects using the membership operator to set the two apart. By declaring different values for different objects, we can manipulate their current state. So, for instance: the animal1 object is a "dog" with 4 legs to walk with; while, the animal2 object is a "duck" with 2 legs to walk with. What sets the two objects apart is their current state. Both the objects have different states and thus stand out as two different objects even though they were created from the same template or class definition.