Set cannot have duplicates in it. You may wonder how duplicates are detected when we are adding an object to the Set. We have to see if that object exists in the Set or not. It is not enough to check the object references, the objects' values have to be checked as well. To do that, fortunately, each java object has the boolean equals(Object obj), method available inherited from Object. You need to override it. That method will be called by the Set implementation to compare the two objects to see if they are equal or not. There is a problem, though. What if I put two different type of objects to the Set. I put an Apple and an Orange. They can not be compared.  Calling the equals() method would cause a ClassCastException. There are two solutions to this: Solution one: Override the int hashCode() method and return the same values for the same type of objects and return different values for different type of objects.  The equals() method is used to compare objects only with the same value of hashCode. So before an object is added, the Set implementation needs to:find all the objects in the Set that have the same hashCode as the candidate object hashCodeand for those, call the equals() methods passing in the candidate objectif any of them returns true, the object is not added to the Set. find all the objects in the Set that have the same hashCode as the candidate object hashCode and for those, call the equals() methods passing in the candidate object if any of them returns true, the object is not added to the Set. Solution two: Create a super class for the Apple and Orange, let's call it Fruit class. Put Fruits in the Set. You need to do the following:Do not override the equals() and hashCode() methods in the Apple and Orange classesCreate appleEquals() method in the Apple class, and create orangeEquals() method in the Orange classOverride the hashCode() method in the Fruit class and return the same value, so the equals() is called by the Set implementationOverride the equals() method in the Fruit class for something like this. Do not override the equals() and hashCode() methods in the Apple and Orange classes Create appleEquals() method in the Apple class, and create orangeEquals() method in the Orange class Override the hashCode() method in the Fruit class and return the same value, so the equals() is called by the Set implementation Override the equals() method in the Fruit class for something like this. Code section 5.5: equals method implementation. 1 public boolean equals(Object obj) { 2     boolean ret = false; 3     if (this instanceof Apple && 4           obj instanceof Apple) { 5         ret = this.appleEquals(obj); 6     } else if (this instanceof Orange && 7               obj  instanceof Orange) { 8         ret = this.orangeEquals(obj);   9     } else {10         // Can not compare Orange to Apple11        ret = false;12     }13     return ret;14 } Note: Only the objects that have the same hashCode will be compared. You are responsible to override the equals() and hashCode() methods. The default implementations in Object won't work. Only override the hashCode() method if you want to eliminate value duplicates. Do not override the hashCode() method if you know that the values of your objects are different, or if you only want to prevent adding the exactly same object. Beware that the hashCode() may be used in other collection implementations, like in a Hashtable to find an object fast. Overriding the default hashCode() method may affect performance there. The default hashCodes are unique for each object created, so if you decide not to override the hashCode() method, there is no point overriding the equals() method, as it won't be called.