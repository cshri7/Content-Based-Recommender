A static method is a method that can be called without an object instance. It can be called on the class directly. For example, the valueOf(String) method of the Integer class is a static method: Code section 3.79: Static method.1 Integer i = Integer.valueOf("10"); The static keyword makes attributes instance-agnostic. This means that you cannot reference a static attribute of a single object (because such a specific object attribute doesn't exist). Instead, only one instance of a static attribute exists, whether there is one object in the JVM or one hundred. Here is an example of using a static attribute in a static method: Code section 3.80: Static attribute.1 private static int count = 0;2 3 public static int getNewInteger() {4   return count++;5 } You can notice that when you use System.out.println(), out is a static attribute of the System class. A static attribute is related to a class, not to any object instance. This is how Java achieves one universal output stream that we can use to print output. Here is a more complex use case: Code listing 3.14: A static attribute. 1 public class MyProgram { 2  3     public static int count = 0; 4  5     public static void main (String[] args) { 6         MyProgram.count++; 7  8         MyProgram program1 = new MyProgram(); 9         program1.count++;10 11         MyProgram program2 = new MyProgram();12         program2.count++;13 14         new MyProgram().count++;15         System.out.println(MyProgram.count);16     }17 }Output for Code listing 3.144 Test your knowledgeQuestion 3.11: Visit the Oracle JavaDoc of the class java.lang.Integer.How many static fields does this class have?Answer4.int MAX_VALUE,int MIN_VALUE,int SIZE andClass<Integer> TYPE. To learn how to overload and override a method, see Overloading Methods and Constructors.