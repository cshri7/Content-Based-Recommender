<? super ClassName> specifies a restriction on the types of classes that may be used.For example, to declare a Comparator that can compare Dogs, you use: Code section 4.42: Superclass.1 Comparator<? super Dog> myComparator; Now suppose you define a comparator that can compare Animals: Code section 4.43: Comparator.1 class AnimalComparator implements Comparator<Animal> {2   int compare(Animal a, Animal b) {3    //...4   }5 } Since Dogs are Animals, you can use this comparator to compare Dogs also. Comparators for any superclass of Dog can also compare Dog; but comparators for any strict subclass cannot. Code section 4.44: Generic comparator.1 Comparator<Animal> myAnimalComparator = new AnimalComparator();2 3 static int compareTwoDogs(Comparator<? super Dog> comp, Dog dog1, Dog dog2) {4   return comp.compare(dog1, dog2);5 } The above code is valid because the Animal class is a supertype of the Dog class. Use of a class that is not a supertype would cause a compilation error.