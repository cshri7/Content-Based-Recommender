The Java boolean operators are based on the operations of the boolean algebra. The boolean operators operate directly on boolean values. Here is a list of four common boolean operators in Java: !: Boolean NOT &&: Boolean AND ||: Boolean inclusive OR ^: Boolean exclusive XOR The boolean NOT operator ("!") inverts the value of a boolean expression.  The boolean AND operator ("&&") will result in true if and only if the values on both sides of the operator are true.  The boolean inclusive OR operator ("||") will result in true if either or both of the values on the sides of the operator is true.  The boolean exclusive XOR operator ("^") will result in true if one and only of the values on the sides of the operator is true. To show how these operators are used, here is an example: Code section 3.38: Operands. 1 boolean iMTrue = true; 2 boolean iMTrueToo = true; 3 boolean iMFalse = false; 4 boolean iMFalseToo = false; 5  6 System.out.println("NOT operand:"); 7 System.out.println(!iMTrue); 8 System.out.println(!iMFalse); 9 System.out.println(!(4 < 5));10 System.out.println("AND operand:");11 System.out.println(iMTrue && iMTrueToo);12 System.out.println(iMFalse && iMFalseToo);13 System.out.println(iMTrue && iMFalse);14 System.out.println(iMTrue && !iMFalse);15 System.out.println("OR operand:");16 System.out.println(iMTrue || iMTrueToo);17 System.out.println(iMFalse || iMFalseToo);18 System.out.println(iMTrue || iMFalse);19 System.out.println(iMFalse || !iMTrue);20 System.out.println("XOR operand:");21 System.out.println(iMTrue ^ iMTrueToo);22 System.out.println(iMFalse ^ iMFalseToo);23 System.out.println(iMTrue ^ iMFalse);24 System.out.println(iMFalse ^ !iMTrue);Output for code section 3.38NOT operand:falsetruefalseAND operand:truefalsefalsetrueOR operand:truefalsetruefalseXOR operand:falsefalsetruefalse Here are the truth tables for the boolean operators: For help on simplifying complex logic, see De Morgan's laws. In Java, boolean logic has a useful property called short circuiting.  This means that expressions will only be evaluated as far as necessary.  In the expression (a && b), if a is false, then b will not be evaluated because the expression will be false no matter what. Here is an example that shows that the second expression is not automatically checked: Code section 3.39: Short circuiting.1 System.out.println((4 < 5) || ((10 / 0) == 2));Output for code section 3.39true To disable this property, you can use & instead of && and | instead of || but it's not recommended. For the bitwise operations on & and |, see Arithmetic expressions.