A set collection contains unique elements, so duplicates are not allowed. It is similar to a mathematical Set. When adding a new item to a set, the set calls the method int hashCode() of the item and compares its result to the hash code of all the already inserted items. If the hash code is not found, the item is added. If the hash code is found, the set calls the boolean equals(Object obj); method for all the set items with the same hashcode as the new item. If all equal-calls return false, the new item is inserted in the set. If an equal-call returns true, the new item is not inserted in the set. Figure 2: Set class diagram.  java.util.HashSet<E>This is the basic implementation of the Set interface. Not synchronized. Allows the null elementsjava.util.TreeSet<E>Elements are sorted, not synchronized. null not allowedjava.util.CopyOnWriteArraySet<E>Thread safe, a fresh copy is created during modification operation. Add, update, delete are expensive.java.util.EnumSet<E extends Enum<E>>All of the elements in an enum set must come from a single enum type that is specified, explicitly or implicitly, when the set is created. Enum sets are represented internally as bit vectors.java.util.LinkedHashSet<E>Same as HashSet, plus defines the iteration ordering, which is the order in which elements were inserted into the set.