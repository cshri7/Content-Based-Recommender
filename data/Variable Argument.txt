Instead of overloading, you can use a dynamic number of arguments. After the last parameter, you can pass optional unlimited parameters of the same type. These parameters are defined by adding a last parameter and adding ... after its type. The dynamic arguments will be received as an array: Code section 4.27: Variable argument. 1   public void registerPersonInAgenda(String firstName, String lastName, Date... meeting) { 2     String[] person = {firstName, lastName}; 3     lastPosition = lastPosition + 1; 4     contactArray[lastPosition] = person; 5  6     if (meeting.length > 0) { 7       Date[] temporaryMeetings = registeredMeetings.length + meeting.length; 8       for (i = 0; i < registeredMeetings.length; i++) { 9         temporaryMeetings[i] = registeredMeetings[i];10       }11       for (i = 0; i < meeting.length; i++) {12         temporaryMeetings[registeredMeetings.length + i] = meeting[i];13       }14       registeredMeetings = temporaryMeetings;15     }16   } The above method can be called with a dynamic number of arguments, for example: Code section 4.27: Constructor calls.1 registerPersonInAgenda("John", "Doe");2 registerPersonInAgenda("Mark", "Lee", new Date(), new Date()); This feature was not available before Java 1.5 .