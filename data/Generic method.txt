A generic type can be defined for just a method: Code section 4.37: Generic method.1 public <D> D assign(Collection<D> generic, D obj) {2   generic.add(obj);3   return obj;4 } Here a new identifier (D) has been chosen at the beginning of the method declaration. The type is specific to a method call and different types can be used for the same object instance: Code section 4.38: Generic method call.1 Collection<Integer> numbers = new ArrayList<Integer>();2 Integer number = assign(numbers, new Integer(1));3 Collection<String> texts = new ArrayList<String>();4 String text = assign(texts, "Store it."); The actual type will be defined by the type of the method parameter. Hence, the generic type can't be defined only for the return value as it wouldn't be resolved. See the Class<T> section for a solution. Test your knowledgeQuestion 4.8: Consider the following class.Question 4.8: Question8.java 1 public class Question8<T> { 2   public T item; 3   4   public T getItem() { 5     return item; 6   } 7   8   public void setItem(T newItem) { 9     item = newItem;10   }11 12   public static void main(String[] args) {13     Question8<String> aQuestion = new Question8<String>();14     aQuestion.setItem("Open your mind.");15     aQuestion.display(aQuestion.getItem());16   }17 18   public void display(String parameter) {19     System.out.println("Here is the text: " + parameter);20   }21 22   public void display(Integer parameter) {23     System.out.println("Here is the number: " + parameter);24   }25 26   public void display(Object parameter) {27     System.out.println("Here is the object: " + parameter);28   }29 }What will be displayed on the console?AnswerConsole for Answer 4.8Here is the text: Open your mind.aQuestion.getItem() is typed as a string.