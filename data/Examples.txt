The code listing 3.7 recieves a number as parameter and print its binary representation. Code listing 3.7: GetBinary.java 1 public class GetBinary { 2     public static void main(String[] args) { 3         if (args.length == 0) { 4             // Print usage 5             System.out.println("Usage: java GetBinary <decimal integer>"); 6             System.exit(0); 7         } else { 8             // Print arguments 9             System.out.println("Received " + args.length + " arguments.");10             System.out.println("The arguments are:");11             for (String arg : args) {12                 System.out.println("\t" + arg);13             }14         }15 16         int number = 0;17         String binary = "";18 19         // Get the input number20         try {21             number = Integer.parseInt(args[0]);22         } catch (NumberFormatException ex) {23             System.out.println("Error: argument must be a base-10 integer.");24             System.exit(0);25         }26 27         // Convert to a binary string28         do {29             switch (number % 2) {30                 case 0: binary = '0' + binary; break;31                 case 1: binary = '1' + binary; break;32             }33             number >>= 1;34         } while (number > 0);35 36         System.out.println("The binary representation of " + args[0] + " is " + binary);37     }38 } The code listing 3.8 is a simulation of playing a game called Lucky Sevens. It is a dice game where the player rolls two dice. If the numbers on the dice add up to seven, he wins $4. If they do not, he loses $1. The game shows how to use control flow in a program as well as the fruitlessness of gambling. Code listing 3.8: LuckySevens.java 1 import java.util.*; 2  3 public class LuckySevens { 4     public static void main(String[] args) { 5         Scanner in = new Scanner(System.in); 6         Random random = new Random(); 7         String input; 8         int startingCash, cash, maxCash, rolls, roll; 9 10         // Loop until "quit" is input11         while (true) {12             System.out.print("Enter the amount of cash to start with (or \"quit\" to quit): ");13 14             input = in.nextLine();15 16             // Check if user wants to exit17             if (input.toLowerCase().equals("quit")) {18                 System.out.println("\tGoodbye.");19                 System.exit(0);20             }21 22             // Get number23             try {24                 startingCash = Integer.parseInt(input);25             } catch (NumberFormatException ex) {26                 System.out.println("\tPlease enter a positive integer greater than 0.");27                 continue;28             }29 30             // You have to start with some money!31             if (startingCash <= 0) {32                 System.out.println("\tPlease enter a positive integer greater than 0.");33                 continue;34             }35 36             cash = startingCash;37             maxCash = cash;38             rolls = 0;39             roll = 0;40 41             // Here is the game loop42             for (; cash > 0; rolls++) {43                roll = random.nextInt(6) + 1;44                roll += random.nextInt(6) + 1;45 46                 if (roll == 7)47                     cash += 4;48                 else49                     cash -= 1;50 51                 if (cash > maxCash)52                     maxCash = cash;53             }54 55             System.out.println("\tYou start with $" + startingCash + ".\n"56                     + "\tYou peak at $" + maxCash + ".\n"57       + "\tAfter " + rolls + " rolls, you run out of cash.");58         }59     }60 }