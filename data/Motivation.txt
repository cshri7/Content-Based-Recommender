Java was long criticized for the need to explicitly type-cast an element when it was taken out of a "container/collection" class. There was no way to enforce that a "collection" class contains only one type of object (e.g., to forbid at compile time that an Integer object is added to a Collection that should only contain Strings). This is possible since Java 1.5.In the first couple of years of Java evolution, Java did not have a real competitor. This has changed by the appearance of Microsoft C#. With Generics Java is better suited to compete against C#.Similar constructs to Java Generics exist in other languages, see Generic programming for more information.Generics were added to the Java language syntax in version 1.5. This means that code using Generics will not compile with Java 1.4 and less.Use of generics is optional. For backwards compatibility with pre-Generics code, it is okay to use generic classes without the generics type specification (<T>). In such a case, when you retrieve an object reference from a generic object, you will have to manually cast it from type Object to the correct type. Java Generics are similar to C++ Templates in that both were added for the same reason. The syntax of Java Generic and C++ Template are also similar. There are some differences however. The C++ template can be seen as a kind of macro, in that a new copy of the code is generated for each generic type referenced. All extra code for templates is generated at compiler time.In contrast, Java Generics are built into the language.  The same code is used for each generic type. For example: Code section 4.50: Java generics.1 Collection<String>  collString  = new ArrayList<String>();2 Collection<Integer> collInteger = new ArrayList<Integer>(); Both these objects appear as the same type at runtime (both ArrayList's). The generic type information is erased during compilation (type erasure). For example: Code section 4.51: Type erasure.1 public <T> void method(T argument) {2   T variable;3   4 } is transformed by erasure into: Code section 4.52: Transformation.1 public void method(Object argument) {2   Object variable;3   4 } Test your knowledgeQuestion 4.9: Consider the following class.Question 4.9: Question9.java 1 import java.util.ArrayList; 2 import java.util.Collection; 3  4 public class Question9 { 5   public static void main(String[] args) { 6     Collection<String> collection1 = new ArrayList<String>(); 7     Collection<? extends Object> collection2 = new ArrayList<String>(); 8     Collection<? extends String> collection3 = new ArrayList<String>(); 9     Collection<? extends String> collection4 = new ArrayList<Object>();10     Collection<? super Object> collection5 = new ArrayList<String>();11     Collection<? super Object> collection6 = new ArrayList<Object>();12     Collection<?> collection7 = new ArrayList<String>();13     Collection<? extends Object> collection8 = new ArrayList<?>();14     Collection<? extends Object> collection9 = new ArrayList<Object>();15     Collection<? extends Integer> collection10 = new ArrayList<String>();16     Collection<String> collection11 = new ArrayList<? extends String>();17     Collection collection12 = new ArrayList<String>();18   }19 }Which lines will generate a compile error?AnswerAnswer 4.9: Answer9.java 1 import java.util.ArrayList; 2 import java.util.Collection; 3  4 public class Answer9 { 5   public static void main(String[] args) { 6     Collection<String> collection1 = new ArrayList<String>(); 7     Collection<? extends Object> collection2 = new ArrayList<String>(); 8     Collection<? extends String> collection3 = new ArrayList<String>(); 9     Collection<? extends String> collection4 = new ArrayList<Object>();10     Collection<? super Object> collection5 = new ArrayList<String>();11     Collection<? super Object> collection6 = new ArrayList<Object>();12     Collection<?> collection7 = new ArrayList<String>();13     Collection<? extends Object> collection8 = new ArrayList<?>();14     Collection<? extends Object> collection9 = new ArrayList<Object>();15     Collection<? extends Integer> collection10 = new ArrayList<String>();16     Collection<String> collection11 = new ArrayList<? extends String>();17     Collection collection12 = new ArrayList<String>();18   }19 }Line 9: Object does not extend String.Line 10: String is not a superclass of Object.Line 13: ArrayList<?> can't be instantiated.Line 15: Integer does not extend String.Line 16: ArrayList<? extends String> can't be instantiated.